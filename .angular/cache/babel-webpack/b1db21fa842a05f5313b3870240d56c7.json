{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser')) : typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/platform-browser'], factory) : factory(global['ngx-gallery'] = {}, global.core, global.common, global.platformBrowser);\n})(this, function (exports, core, common, platformBrowser) {\n  'use strict';\n\n  var NgxGalleryActionComponent =\n  /** @class */\n  function () {\n    function NgxGalleryActionComponent() {\n      this.disabled = false;\n      this.titleText = '';\n      this.onClick = new core.EventEmitter();\n    }\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryActionComponent.prototype.handleClick = function (event) {\n      if (!this.disabled) {\n        this.onClick.emit(event);\n      }\n\n      event.stopPropagation();\n      event.preventDefault();\n    };\n\n    NgxGalleryActionComponent.decorators = [{\n      type: core.Component,\n      args: [{\n        selector: 'ngx-gallery-action',\n        template: \"\\n        <div class=\\\"ngx-gallery-icon\\\" [class.ngx-gallery-icon-disabled]=\\\"disabled\\\"\\n            aria-hidden=\\\"true\\\"\\n            title=\\\"{{ titleText }}\\\"\\n            (click)=\\\"handleClick($event)\\\">\\n                <i class=\\\"ngx-gallery-icon-content {{ icon }}\\\"></i>\\n        </div>\",\n        changeDetection: core.ChangeDetectionStrategy.OnPush\n      }]\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryActionComponent.ctorParameters = function () {\n      return [];\n    };\n\n    NgxGalleryActionComponent.propDecorators = {\n      'icon': [{\n        type: core.Input\n      }],\n      'disabled': [{\n        type: core.Input\n      }],\n      'titleText': [{\n        type: core.Input\n      }],\n      'onClick': [{\n        type: core.Output\n      }]\n    };\n    return NgxGalleryActionComponent;\n  }();\n\n  var NgxGalleryArrowsComponent =\n  /** @class */\n  function () {\n    function NgxGalleryArrowsComponent() {\n      this.onPrevClick = new core.EventEmitter();\n      this.onNextClick = new core.EventEmitter();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryArrowsComponent.prototype.handlePrevClick = function () {\n      this.onPrevClick.emit();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryArrowsComponent.prototype.handleNextClick = function () {\n      this.onNextClick.emit();\n    };\n\n    NgxGalleryArrowsComponent.decorators = [{\n      type: core.Component,\n      args: [{\n        selector: 'ngx-gallery-arrows',\n        template: \"\\n        <div class=\\\"ngx-gallery-arrow-wrapper ngx-gallery-arrow-left\\\">\\n            <div class=\\\"ngx-gallery-icon ngx-gallery-arrow\\\" aria-hidden=\\\"true\\\" (click)=\\\"handlePrevClick()\\\" [class.ngx-gallery-disabled]=\\\"prevDisabled\\\">\\n                <i class=\\\"ngx-gallery-icon-content {{arrowPrevIcon}}\\\"></i>\\n            </div>\\n        </div>\\n        <div class=\\\"ngx-gallery-arrow-wrapper ngx-gallery-arrow-right\\\">\\n            <div class=\\\"ngx-gallery-icon ngx-gallery-arrow\\\" aria-hidden=\\\"true\\\" (click)=\\\"handleNextClick()\\\" [class.ngx-gallery-disabled]=\\\"nextDisabled\\\">\\n                <i class=\\\"ngx-gallery-icon-content {{arrowNextIcon}}\\\"></i>\\n            </div>\\n        </div>\\n    \",\n        styles: [\".ngx-gallery-arrow-wrapper { position: absolute; height: 100%; width: 1px; display: table; z-index: 2000; table-layout: fixed; } .ngx-gallery-arrow-left { left: 0px; } .ngx-gallery-arrow-right { right: 0px; } .ngx-gallery-arrow { top: 50%; transform: translateY(-50%); cursor: pointer; } .ngx-gallery-arrow.ngx-gallery-disabled { opacity: 0.6; cursor: default; } .ngx-gallery-arrow-left .ngx-gallery-arrow { left: 10px; } .ngx-gallery-arrow-right .ngx-gallery-arrow { right: 10px; } \"]\n      }]\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryArrowsComponent.ctorParameters = function () {\n      return [];\n    };\n\n    NgxGalleryArrowsComponent.propDecorators = {\n      'prevDisabled': [{\n        type: core.Input\n      }],\n      'nextDisabled': [{\n        type: core.Input\n      }],\n      'arrowPrevIcon': [{\n        type: core.Input\n      }],\n      'arrowNextIcon': [{\n        type: core.Input\n      }],\n      'onPrevClick': [{\n        type: core.Output\n      }],\n      'onNextClick': [{\n        type: core.Output\n      }]\n    };\n    return NgxGalleryArrowsComponent;\n  }();\n\n  var NgxGalleryBulletsComponent =\n  /** @class */\n  function () {\n    function NgxGalleryBulletsComponent() {\n      this.active = 0;\n      this.onChange = new core.EventEmitter();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryBulletsComponent.prototype.getBullets = function () {\n      return Array(this.count);\n    };\n    /**\r\n     * @param {?} event\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryBulletsComponent.prototype.handleChange = function (event, index) {\n      this.onChange.emit(index);\n    };\n\n    NgxGalleryBulletsComponent.decorators = [{\n      type: core.Component,\n      args: [{\n        selector: 'ngx-gallery-bullets',\n        template: \"\\n        <div class=\\\"ngx-gallery-bullet\\\" *ngFor=\\\"let bullet of getBullets(); let i = index;\\\" (click)=\\\"handleChange($event, i)\\\" [ngClass]=\\\"{ 'ngx-gallery-active': i == active }\\\"></div>\\n    \",\n        styles: [\":host { position: absolute; z-index: 2000; display: inline-flex; left: 50%; transform: translateX(-50%); bottom: 0px; padding: 10px; } .ngx-gallery-bullet { width: 10px; height: 10px; border-radius: 50%; cursor: pointer; background: white; } .ngx-gallery-bullet:not(:first-child) { margin-left: 5px; } .ngx-gallery-bullet:hover, .ngx-gallery-bullet.ngx-gallery-active { background: black; } \"]\n      }]\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryBulletsComponent.ctorParameters = function () {\n      return [];\n    };\n\n    NgxGalleryBulletsComponent.propDecorators = {\n      'count': [{\n        type: core.Input\n      }],\n      'active': [{\n        type: core.Input\n      }],\n      'onChange': [{\n        type: core.Output\n      }]\n    };\n    return NgxGalleryBulletsComponent;\n  }();\n\n  var NgxGalleryHelperService =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} renderer\r\n     */\n    function NgxGalleryHelperService(renderer) {\n      this.renderer = renderer;\n      this.swipeHandlers = new Map();\n    }\n    /**\r\n     * @param {?} status\r\n     * @param {?} element\r\n     * @param {?} id\r\n     * @param {?} nextHandler\r\n     * @param {?} prevHandler\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryHelperService.prototype.manageSwipe = function (status, element, id, nextHandler, prevHandler) {\n      var\n      /** @type {?} */\n      handlers = this.getSwipeHandlers(id); // swipeleft and swiperight are available only if hammerjs is included\n\n      try {\n        if (status && !handlers) {\n          this.swipeHandlers.set(id, [this.renderer.listen(element.nativeElement, 'swipeleft', function () {\n            return nextHandler();\n          }), this.renderer.listen(element.nativeElement, 'swiperight', function () {\n            return prevHandler();\n          })]);\n        } else if (!status && handlers) {\n          handlers.map(function (handler) {\n            return handler();\n          });\n          this.removeSwipeHandlers(id);\n        }\n      } catch (e) {}\n    };\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryHelperService.prototype.validateUrl = function (url) {\n      if (url.replace) {\n        return url.replace(new RegExp(' ', 'g'), '%20').replace(new RegExp('\\'', 'g'), '%27');\n      } else {\n        return url;\n      }\n    };\n    /**\r\n     * @param {?} image\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryHelperService.prototype.getBackgroundUrl = function (image) {\n      return 'url(\\'' + this.validateUrl(image) + '\\')';\n    };\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryHelperService.prototype.getSwipeHandlers = function (id) {\n      return this.swipeHandlers.get(id);\n    };\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryHelperService.prototype.removeSwipeHandlers = function (id) {\n      this.swipeHandlers.delete(id);\n    };\n\n    NgxGalleryHelperService.decorators = [{\n      type: core.Injectable\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryHelperService.ctorParameters = function () {\n      return [{\n        type: core.Renderer\n      }];\n    };\n\n    return NgxGalleryHelperService;\n  }();\n\n  var NgxGalleryAnimation =\n  /** @class */\n  function () {\n    function NgxGalleryAnimation() {}\n\n    NgxGalleryAnimation.Fade = 'fade';\n    NgxGalleryAnimation.Slide = 'slide';\n    NgxGalleryAnimation.Rotate = 'rotate';\n    NgxGalleryAnimation.Zoom = 'zoom';\n    return NgxGalleryAnimation;\n  }();\n\n  var NgxGalleryImageComponent =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} sanitization\r\n     * @param {?} elementRef\r\n     * @param {?} helperService\r\n     */\n    function NgxGalleryImageComponent(sanitization, elementRef, helperService) {\n      this.sanitization = sanitization;\n      this.elementRef = elementRef;\n      this.helperService = helperService;\n      this.onClick = new core.EventEmitter();\n      this.onActiveChange = new core.EventEmitter();\n      this.canChangeImage = true;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.ngOnInit = function () {\n      if (this.arrows && this.arrowsAutoHide) {\n        this.arrows = false;\n      }\n\n      if (this.autoPlay) {\n        this.startAutoPlay();\n      }\n    };\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.ngOnChanges = function (changes) {\n      var _this = this;\n\n      if (changes['swipe']) {\n        this.helperService.manageSwipe(this.swipe, this.elementRef, 'image', function () {\n          return _this.showNext();\n        }, function () {\n          return _this.showPrev();\n        });\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.onMouseEnter = function () {\n      if (this.arrowsAutoHide && !this.arrows) {\n        this.arrows = true;\n      }\n\n      if (this.autoPlay && this.autoPlayPauseOnHover) {\n        this.stopAutoPlay();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.onMouseLeave = function () {\n      if (this.arrowsAutoHide && this.arrows) {\n        this.arrows = false;\n      }\n\n      if (this.autoPlay && this.autoPlayPauseOnHover) {\n        this.startAutoPlay();\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.reset = function (index) {\n      this.selectedIndex = index;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.getImages = function () {\n      if (!this.images) {\n        return [];\n      }\n\n      if (this.lazyLoading) {\n        var\n        /** @type {?} */\n        indexes_1 = [this.selectedIndex];\n        var\n        /** @type {?} */\n        prevIndex = this.selectedIndex - 1;\n\n        if (prevIndex === -1 && this.infinityMove) {\n          indexes_1.push(this.images.length - 1);\n        } else if (prevIndex >= 0) {\n          indexes_1.push(prevIndex);\n        }\n\n        var\n        /** @type {?} */\n        nextIndex = this.selectedIndex + 1;\n\n        if (nextIndex == this.images.length && this.infinityMove) {\n          indexes_1.push(0);\n        } else if (nextIndex < this.images.length) {\n          indexes_1.push(nextIndex);\n        }\n\n        return this.images.filter(function (img, i) {\n          return indexes_1.indexOf(i) != -1;\n        });\n      } else {\n        return this.images;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.startAutoPlay = function () {\n      var _this = this;\n\n      this.stopAutoPlay();\n      this.timer = setInterval(function () {\n        if (!_this.showNext()) {\n          _this.selectedIndex = -1;\n\n          _this.showNext();\n        }\n      }, this.autoPlayInterval);\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.stopAutoPlay = function () {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    };\n    /**\r\n     * @param {?} event\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.handleClick = function (event, index) {\n      if (this.clickable) {\n        this.onClick.emit(index);\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.show = function (index) {\n      this.selectedIndex = index;\n      this.onActiveChange.emit(this.selectedIndex);\n      this.setChangeTimeout();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.showNext = function () {\n      if (this.canShowNext() && this.canChangeImage) {\n        this.selectedIndex++;\n\n        if (this.selectedIndex === this.images.length) {\n          this.selectedIndex = 0;\n        }\n\n        this.onActiveChange.emit(this.selectedIndex);\n        this.setChangeTimeout();\n        return true;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.showPrev = function () {\n      if (this.canShowPrev() && this.canChangeImage) {\n        this.selectedIndex--;\n\n        if (this.selectedIndex < 0) {\n          this.selectedIndex = this.images.length - 1;\n        }\n\n        this.onActiveChange.emit(this.selectedIndex);\n        this.setChangeTimeout();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.setChangeTimeout = function () {\n      var _this = this;\n\n      this.canChangeImage = false;\n      var\n      /** @type {?} */\n      timeout = 1000;\n\n      if (this.animation === NgxGalleryAnimation.Slide || this.animation === NgxGalleryAnimation.Fade) {\n        timeout = 500;\n      }\n\n      setTimeout(function () {\n        _this.canChangeImage = true;\n      }, timeout);\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.canShowNext = function () {\n      if (this.images) {\n        return this.infinityMove || this.selectedIndex < this.images.length - 1 ? true : false;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.canShowPrev = function () {\n      if (this.images) {\n        return this.infinityMove || this.selectedIndex > 0 ? true : false;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @param {?} image\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryImageComponent.prototype.getSafeUrl = function (image) {\n      return this.sanitization.bypassSecurityTrustStyle(this.helperService.getBackgroundUrl(image));\n    };\n\n    NgxGalleryImageComponent.decorators = [{\n      type: core.Component,\n      args: [{\n        selector: 'ngx-gallery-image',\n        template: \"\\n        <div class=\\\"ngx-gallery-image-wrapper ngx-gallery-animation-{{animation}} ngx-gallery-image-size-{{size}}\\\">\\n            <div class=\\\"ngx-gallery-image\\\" *ngFor=\\\"let image of getImages(); let i = index;\\\" [ngClass]=\\\"{ 'ngx-gallery-active': selectedIndex == image.index, 'ngx-gallery-inactive-left': selectedIndex > image.index, 'ngx-gallery-inactive-right': selectedIndex < image.index, 'ngx-gallery-clickable': clickable }\\\" [style.background-image]=\\\"getSafeUrl(image.src)\\\" (click)=\\\"handleClick($event, image.index)\\\">\\n                <div class=\\\"ngx-gallery-icons-wrapper\\\">\\n                    <ngx-gallery-action *ngFor=\\\"let action of actions\\\" [icon]=\\\"action.icon\\\" [disabled]=\\\"action.disabled\\\" [titleText]=\\\"action.titleText\\\" (onClick)=\\\"action.onClick($event, image.index)\\\"></ngx-gallery-action>\\n                </div>\\n                <div class=\\\"ngx-gallery-image-text\\\" *ngIf=\\\"showDescription && descriptions[image.index]\\\" [innerHTML]=\\\"descriptions[image.index]\\\" (click)=\\\"$event.stopPropagation()\\\"></div>\\n            </div>\\n        </div>\\n        <ngx-gallery-bullets *ngIf=\\\"bullets\\\" [count]=\\\"images.length\\\" [active]=\\\"selectedIndex\\\" (onChange)=\\\"show($event)\\\"></ngx-gallery-bullets>\\n        <ngx-gallery-arrows class=\\\"ngx-gallery-image-size-{{size}}\\\" *ngIf=\\\"arrows\\\" (onPrevClick)=\\\"showPrev()\\\" (onNextClick)=\\\"showNext()\\\" [prevDisabled]=\\\"!canShowPrev()\\\" [nextDisabled]=\\\"!canShowNext()\\\" [arrowPrevIcon]=\\\"arrowPrevIcon\\\" [arrowNextIcon]=\\\"arrowNextIcon\\\"></ngx-gallery-arrows>\\n    \",\n        styles: [\":host { width: 100%; display: inline-block; position: relative; } .ngx-gallery-image-wrapper { width: 100%; height: 100%; position: absolute; left: 0px; top: 0px; overflow: hidden; } .ngx-gallery-image { background-position: center; background-repeat: no-repeat; height: 100%; width: 100%; position: absolute; top: 0px; } .ngx-gallery-image.ngx-gallery-active { z-index: 1000; } .ngx-gallery-image-size-cover .ngx-gallery-image { background-size: cover; } .ngx-gallery-image-size-contain .ngx-gallery-image { background-size: contain; } .ngx-gallery-animation-fade .ngx-gallery-image { left: 0px; opacity: 0; transition: 0.5s ease-in-out; } .ngx-gallery-animation-fade .ngx-gallery-image.ngx-gallery-active { opacity: 1; } .ngx-gallery-animation-slide .ngx-gallery-image { transition: 0.5s ease-in-out; } .ngx-gallery-animation-slide .ngx-gallery-image.ngx-gallery-active { left: 0px; } .ngx-gallery-animation-slide .ngx-gallery-image.ngx-gallery-inactive-left { left: -100%; } .ngx-gallery-animation-slide .ngx-gallery-image.ngx-gallery-inactive-right { left: 100%; } .ngx-gallery-animation-rotate .ngx-gallery-image { transition: 1s ease; transform: scale(3.5, 3.5) rotate(90deg); left: 0px; opacity: 0; } .ngx-gallery-animation-rotate .ngx-gallery-image.ngx-gallery-active { transform: scale(1, 1) rotate(0deg); opacity: 1; } .ngx-gallery-animation-zoom .ngx-gallery-image { transition: 1s ease; transform: scale(2.5, 2.5); left: 0px; opacity: 0; } .ngx-gallery-animation-zoom .ngx-gallery-image.ngx-gallery-active { transform: scale(1, 1); opacity: 1; } .ngx-gallery-image-text { width: 100%; background: rgba(0, 0, 0, 0.7); padding: 10px; text-align: center; color: white; font-size: 16px; position: absolute; bottom: 0px; z-index: 10; } \"]\n      }]\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryImageComponent.ctorParameters = function () {\n      return [{\n        type: platformBrowser.DomSanitizer\n      }, {\n        type: core.ElementRef\n      }, {\n        type: NgxGalleryHelperService\n      }];\n    };\n\n    NgxGalleryImageComponent.propDecorators = {\n      'images': [{\n        type: core.Input\n      }],\n      'clickable': [{\n        type: core.Input\n      }],\n      'selectedIndex': [{\n        type: core.Input\n      }],\n      'arrows': [{\n        type: core.Input\n      }],\n      'arrowsAutoHide': [{\n        type: core.Input\n      }],\n      'swipe': [{\n        type: core.Input\n      }],\n      'animation': [{\n        type: core.Input\n      }],\n      'size': [{\n        type: core.Input\n      }],\n      'arrowPrevIcon': [{\n        type: core.Input\n      }],\n      'arrowNextIcon': [{\n        type: core.Input\n      }],\n      'autoPlay': [{\n        type: core.Input\n      }],\n      'autoPlayInterval': [{\n        type: core.Input\n      }],\n      'autoPlayPauseOnHover': [{\n        type: core.Input\n      }],\n      'infinityMove': [{\n        type: core.Input\n      }],\n      'lazyLoading': [{\n        type: core.Input\n      }],\n      'actions': [{\n        type: core.Input\n      }],\n      'descriptions': [{\n        type: core.Input\n      }],\n      'showDescription': [{\n        type: core.Input\n      }],\n      'bullets': [{\n        type: core.Input\n      }],\n      'onClick': [{\n        type: core.Output\n      }],\n      'onActiveChange': [{\n        type: core.Output\n      }],\n      'onMouseEnter': [{\n        type: core.HostListener,\n        args: ['mouseenter']\n      }],\n      'onMouseLeave': [{\n        type: core.HostListener,\n        args: ['mouseleave']\n      }]\n    };\n    return NgxGalleryImageComponent;\n  }();\n\n  var NgxGalleryOrder =\n  /** @class */\n  function () {\n    function NgxGalleryOrder() {}\n\n    NgxGalleryOrder.Column = 1;\n    NgxGalleryOrder.Row = 2;\n    NgxGalleryOrder.Page = 3;\n    return NgxGalleryOrder;\n  }();\n\n  var NgxGalleryThumbnailsComponent =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} sanitization\r\n     * @param {?} elementRef\r\n     * @param {?} helperService\r\n     */\n    function NgxGalleryThumbnailsComponent(sanitization, elementRef, helperService) {\n      this.sanitization = sanitization;\n      this.elementRef = elementRef;\n      this.helperService = helperService;\n      this.minStopIndex = 0;\n      this.onActiveChange = new core.EventEmitter();\n      this.index = 0;\n    }\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.ngOnChanges = function (changes) {\n      var _this = this;\n\n      if (changes['selectedIndex']) {\n        this.validateIndex();\n      }\n\n      if (changes['swipe']) {\n        this.helperService.manageSwipe(this.swipe, this.elementRef, 'thumbnails', function () {\n          return _this.moveRight();\n        }, function () {\n          return _this.moveLeft();\n        });\n      }\n\n      if (this.images) {\n        this.remainingCountValue = this.images.length - this.rows * this.columns;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.onMouseEnter = function () {\n      this.mouseenter = true;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.onMouseLeave = function () {\n      this.mouseenter = false;\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.reset = function (index) {\n      this.selectedIndex = index;\n      this.setDefaultPosition();\n      this.index = 0;\n      this.validateIndex();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getImages = function () {\n      if (!this.images) {\n        return [];\n      }\n\n      if (this.remainingCount) {\n        return this.images.slice(0, this.rows * this.columns);\n      } else if (this.lazyLoading && this.order != NgxGalleryOrder.Row) {\n        var\n        /** @type {?} */\n        stopIndex = 0;\n\n        if (this.order === NgxGalleryOrder.Column) {\n          stopIndex = (this.index + this.columns + this.moveSize) * this.rows;\n        } else if (this.order === NgxGalleryOrder.Page) {\n          stopIndex = this.index + this.columns * this.rows * 2;\n        }\n\n        if (stopIndex <= this.minStopIndex) {\n          stopIndex = this.minStopIndex;\n        } else {\n          this.minStopIndex = stopIndex;\n        }\n\n        return this.images.slice(0, stopIndex);\n      } else {\n        return this.images;\n      }\n    };\n    /**\r\n     * @param {?} event\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.handleClick = function (event, index) {\n      if (!this.hasLink(index)) {\n        this.selectedIndex = index;\n        this.onActiveChange.emit(index);\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.hasLink = function (index) {\n      if (this.links && this.links.length && this.links[index]) return true;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.moveRight = function () {\n      if (this.canMoveRight()) {\n        this.index += this.moveSize;\n        var\n        /** @type {?} */\n        maxIndex = this.getMaxIndex() - this.columns;\n\n        if (this.index > maxIndex) {\n          this.index = maxIndex;\n        }\n\n        this.setThumbnailsPosition();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.moveLeft = function () {\n      if (this.canMoveLeft()) {\n        this.index -= this.moveSize;\n\n        if (this.index < 0) {\n          this.index = 0;\n        }\n\n        this.setThumbnailsPosition();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.canMoveRight = function () {\n      return this.index + this.columns < this.getMaxIndex() ? true : false;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.canMoveLeft = function () {\n      return this.index !== 0 ? true : false;\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getThumbnailLeft = function (index) {\n      var\n      /** @type {?} */\n      calculatedIndex;\n\n      if (this.order === NgxGalleryOrder.Column) {\n        calculatedIndex = Math.floor(index / this.rows);\n      } else if (this.order === NgxGalleryOrder.Page) {\n        calculatedIndex = index % this.columns + Math.floor(index / (this.rows * this.columns)) * this.columns;\n      } else if (this.order == NgxGalleryOrder.Row && this.remainingCount) {\n        calculatedIndex = index % this.columns;\n      } else {\n        calculatedIndex = index % Math.ceil(this.images.length / this.rows);\n      }\n\n      return this.getThumbnailPosition(calculatedIndex, this.columns);\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getThumbnailTop = function (index) {\n      var\n      /** @type {?} */\n      calculatedIndex;\n\n      if (this.order === NgxGalleryOrder.Column) {\n        calculatedIndex = index % this.rows;\n      } else if (this.order === NgxGalleryOrder.Page) {\n        calculatedIndex = Math.floor(index / this.columns) - Math.floor(index / (this.rows * this.columns)) * this.rows;\n      } else if (this.order == NgxGalleryOrder.Row && this.remainingCount) {\n        calculatedIndex = Math.floor(index / this.columns);\n      } else {\n        calculatedIndex = Math.floor(index / Math.ceil(this.images.length / this.rows));\n      }\n\n      return this.getThumbnailPosition(calculatedIndex, this.rows);\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getThumbnailWidth = function () {\n      return this.getThumbnailDimension(this.columns);\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getThumbnailHeight = function () {\n      return this.getThumbnailDimension(this.rows);\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.setThumbnailsPosition = function () {\n      this.thumbnailsLeft = -(100 / this.columns * this.index) + '%';\n      this.thumbnailsMarginLeft = -((this.margin - (this.columns - 1) * this.margin / this.columns) * this.index) + 'px';\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.setDefaultPosition = function () {\n      this.thumbnailsLeft = '0px';\n      this.thumbnailsMarginLeft = '0px';\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.canShowArrows = function () {\n      if (this.remainingCount) {\n        return false;\n      } else if (this.arrows && this.images && this.images.length > this.getVisibleCount() && (!this.arrowsAutoHide || this.mouseenter)) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.validateIndex = function () {\n      if (this.images) {\n        var\n        /** @type {?} */\n        newIndex = void 0;\n\n        if (this.order === NgxGalleryOrder.Column) {\n          newIndex = Math.floor(this.selectedIndex / this.rows);\n        } else {\n          newIndex = this.selectedIndex % Math.ceil(this.images.length / this.rows);\n        }\n\n        if (this.remainingCount) {\n          newIndex = 0;\n        }\n\n        if (newIndex < this.index || newIndex >= this.index + this.columns) {\n          var\n          /** @type {?} */\n          maxIndex = this.getMaxIndex() - this.columns;\n          this.index = newIndex > maxIndex ? maxIndex : newIndex;\n          this.setThumbnailsPosition();\n        }\n      }\n    };\n    /**\r\n     * @param {?} image\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getSafeUrl = function (image) {\n      return this.sanitization.bypassSecurityTrustStyle(this.helperService.getBackgroundUrl(image));\n    };\n    /**\r\n     * @param {?} index\r\n     * @param {?} count\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getThumbnailPosition = function (index, count) {\n      return this.getSafeStyle('calc(' + 100 / count * index + '% + ' + (this.margin - (count - 1) * this.margin / count) * index + 'px)');\n    };\n    /**\r\n     * @param {?} count\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getThumbnailDimension = function (count) {\n      if (this.margin !== 0) {\n        return this.getSafeStyle('calc(' + 100 / count + '% - ' + (count - 1) * this.margin / count + 'px)');\n      } else {\n        return this.getSafeStyle('calc(' + 100 / count + '% + 1px)');\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getMaxIndex = function () {\n      if (this.order == NgxGalleryOrder.Page) {\n        var\n        /** @type {?} */\n        maxIndex = Math.floor(this.images.length / this.getVisibleCount()) * this.columns;\n\n        if (this.images.length % this.getVisibleCount() > this.columns) {\n          maxIndex += this.columns;\n        } else {\n          maxIndex += this.images.length % this.getVisibleCount();\n        }\n\n        return maxIndex;\n      } else {\n        return Math.ceil(this.images.length / this.rows);\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getVisibleCount = function () {\n      return this.columns * this.rows;\n    };\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryThumbnailsComponent.prototype.getSafeStyle = function (value) {\n      return this.sanitization.bypassSecurityTrustStyle(value);\n    };\n\n    NgxGalleryThumbnailsComponent.decorators = [{\n      type: core.Component,\n      args: [{\n        selector: 'ngx-gallery-thumbnails',\n        template: \"\\n    <div class=\\\"ngx-gallery-thumbnails-wrapper ngx-gallery-thumbnail-size-{{size}}\\\">\\n        <div class=\\\"ngx-gallery-thumbnails\\\" [style.transform]=\\\"'translateX(' + thumbnailsLeft + ')'\\\" [style.marginLeft]=\\\"thumbnailsMarginLeft\\\">\\n            <a [href]=\\\"hasLink(i) ? links[i] : '#'\\\" [target]=\\\"linkTarget\\\" class=\\\"ngx-gallery-thumbnail\\\" *ngFor=\\\"let image of getImages(); let i = index;\\\" [style.background-image]=\\\"getSafeUrl(image)\\\" (click)=\\\"handleClick($event, i)\\\" [style.width]=\\\"getThumbnailWidth()\\\" [style.height]=\\\"getThumbnailHeight()\\\" [style.left]=\\\"getThumbnailLeft(i)\\\" [style.top]=\\\"getThumbnailTop(i)\\\" [ngClass]=\\\"{ 'ngx-gallery-active': i == selectedIndex, 'ngx-gallery-clickable': clickable }\\\" [attr.aria-label]=\\\"labels[i]\\\">\\n                <div class=\\\"ngx-gallery-icons-wrapper\\\">\\n                    <ngx-gallery-action *ngFor=\\\"let action of actions\\\" [icon]=\\\"action.icon\\\" [disabled]=\\\"action.disabled\\\" [titleText]=\\\"action.titleText\\\" (onClick)=\\\"action.onClick($event, i)\\\"></ngx-gallery-action>\\n                </div>\\n                <div class=\\\"ngx-gallery-remaining-count-overlay\\\" *ngIf=\\\"remainingCount && remainingCountValue && (i == (rows * columns) - 1)\\\">\\n                    <span class=\\\"ngx-gallery-remaining-count\\\">+{{remainingCountValue}}</span>\\n                </div>\\n            </a>\\n        </div>\\n    </div>\\n    <ngx-gallery-arrows *ngIf=\\\"canShowArrows()\\\" (onPrevClick)=\\\"moveLeft()\\\" (onNextClick)=\\\"moveRight()\\\" [prevDisabled]=\\\"!canMoveLeft()\\\" [nextDisabled]=\\\"!canMoveRight()\\\" [arrowPrevIcon]=\\\"arrowPrevIcon\\\" [arrowNextIcon]=\\\"arrowNextIcon\\\"></ngx-gallery-arrows>\\n    \",\n        styles: [\":host { width: 100%; display: inline-block; position: relative; } .ngx-gallery-thumbnails-wrapper { width: 100%; height: 100%; position: absolute; overflow: hidden; } .ngx-gallery-thumbnails { height: 100%; width: 100%; position: absolute; left: 0px; transform: translateX(0); transition: transform 0.5s ease-in-out; will-change: transform; } .ngx-gallery-thumbnails .ngx-gallery-thumbnail { position: absolute; height: 100%; background-position: center; background-repeat: no-repeat; text-decoration: none; } .ngx-gallery-thumbnail-size-cover .ngx-gallery-thumbnails .ngx-gallery-thumbnail { background-size: cover; } .ngx-gallery-thumbnail-size-contain .ngx-gallery-thumbnails .ngx-gallery-thumbnail { background-size: contain; } .ngx-gallery-remaining-count-overlay { width: 100%; height: 100%; position: absolute; left: 0px; top: 0px; background-color: rgba(0, 0, 0, 0.4); } .ngx-gallery-remaining-count { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white; font-size: 30px; } \"]\n      }]\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryThumbnailsComponent.ctorParameters = function () {\n      return [{\n        type: platformBrowser.DomSanitizer\n      }, {\n        type: core.ElementRef\n      }, {\n        type: NgxGalleryHelperService\n      }];\n    };\n\n    NgxGalleryThumbnailsComponent.propDecorators = {\n      'images': [{\n        type: core.Input\n      }],\n      'links': [{\n        type: core.Input\n      }],\n      'labels': [{\n        type: core.Input\n      }],\n      'linkTarget': [{\n        type: core.Input\n      }],\n      'columns': [{\n        type: core.Input\n      }],\n      'rows': [{\n        type: core.Input\n      }],\n      'arrows': [{\n        type: core.Input\n      }],\n      'arrowsAutoHide': [{\n        type: core.Input\n      }],\n      'margin': [{\n        type: core.Input\n      }],\n      'selectedIndex': [{\n        type: core.Input\n      }],\n      'clickable': [{\n        type: core.Input\n      }],\n      'swipe': [{\n        type: core.Input\n      }],\n      'size': [{\n        type: core.Input\n      }],\n      'arrowPrevIcon': [{\n        type: core.Input\n      }],\n      'arrowNextIcon': [{\n        type: core.Input\n      }],\n      'moveSize': [{\n        type: core.Input\n      }],\n      'order': [{\n        type: core.Input\n      }],\n      'remainingCount': [{\n        type: core.Input\n      }],\n      'lazyLoading': [{\n        type: core.Input\n      }],\n      'actions': [{\n        type: core.Input\n      }],\n      'onActiveChange': [{\n        type: core.Output\n      }],\n      'onMouseEnter': [{\n        type: core.HostListener,\n        args: ['mouseenter']\n      }],\n      'onMouseLeave': [{\n        type: core.HostListener,\n        args: ['mouseleave']\n      }]\n    };\n    return NgxGalleryThumbnailsComponent;\n  }();\n\n  var NgxGalleryPreviewComponent =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} sanitization\r\n     * @param {?} elementRef\r\n     * @param {?} helperService\r\n     * @param {?} renderer\r\n     * @param {?} changeDetectorRef\r\n     */\n    function NgxGalleryPreviewComponent(sanitization, elementRef, helperService, renderer, changeDetectorRef) {\n      this.sanitization = sanitization;\n      this.elementRef = elementRef;\n      this.helperService = helperService;\n      this.renderer = renderer;\n      this.changeDetectorRef = changeDetectorRef;\n      this.showSpinner = false;\n      this.positionLeft = 0;\n      this.positionTop = 0;\n      this.zoomValue = 1;\n      this.loading = false;\n      this.rotateValue = 0;\n      this.index = 0;\n      this.onOpen = new core.EventEmitter();\n      this.onClose = new core.EventEmitter();\n      this.onActiveChange = new core.EventEmitter();\n      this.isOpen = false;\n      this.initialX = 0;\n      this.initialY = 0;\n      this.initialLeft = 0;\n      this.initialTop = 0;\n      this.isMove = false;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.ngOnInit = function () {\n      if (this.arrows && this.arrowsAutoHide) {\n        this.arrows = false;\n      }\n    };\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.ngOnChanges = function (changes) {\n      var _this = this;\n\n      if (changes['swipe']) {\n        this.helperService.manageSwipe(this.swipe, this.elementRef, 'preview', function () {\n          return _this.showNext();\n        }, function () {\n          return _this.showPrev();\n        });\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.ngOnDestroy = function () {\n      if (this.keyDownListener) {\n        this.keyDownListener();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.onMouseEnter = function () {\n      if (this.arrowsAutoHide && !this.arrows) {\n        this.arrows = true;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.onMouseLeave = function () {\n      if (this.arrowsAutoHide && this.arrows) {\n        this.arrows = false;\n      }\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.onKeyDown = function (e) {\n      if (this.isOpen) {\n        if (this.keyboardNavigation) {\n          if (this.isKeyboardPrev(e)) {\n            this.showPrev();\n          } else if (this.isKeyboardNext(e)) {\n            this.showNext();\n          }\n        }\n\n        if (this.closeOnEsc && this.isKeyboardEsc(e)) {\n          this.close();\n        }\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.open = function (index) {\n      var _this = this;\n\n      this.onOpen.emit();\n      this.index = index;\n      this.isOpen = true;\n      this.show(true);\n\n      if (this.forceFullscreen) {\n        this.manageFullscreen();\n      }\n\n      this.keyDownListener = this.renderer.listenGlobal(\"window\", \"keydown\", function (e) {\n        return _this.onKeyDown(e);\n      });\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.close = function () {\n      this.isOpen = false;\n      this.closeFullscreen();\n      this.onClose.emit();\n      this.stopAutoPlay();\n\n      if (this.keyDownListener) {\n        this.keyDownListener();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.imageMouseEnter = function () {\n      if (this.autoPlay && this.autoPlayPauseOnHover) {\n        this.stopAutoPlay();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.imageMouseLeave = function () {\n      if (this.autoPlay && this.autoPlayPauseOnHover) {\n        this.startAutoPlay();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.startAutoPlay = function () {\n      var _this = this;\n\n      if (this.autoPlay) {\n        this.stopAutoPlay();\n        this.timer = setTimeout(function () {\n          if (!_this.showNext()) {\n            _this.index = -1;\n\n            _this.showNext();\n          }\n        }, this.autoPlayInterval);\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.stopAutoPlay = function () {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.showAtIndex = function (index) {\n      this.index = index;\n      this.show();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.showNext = function () {\n      if (this.canShowNext()) {\n        this.index++;\n\n        if (this.index === this.images.length) {\n          this.index = 0;\n        }\n\n        this.show();\n        return true;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.showPrev = function () {\n      if (this.canShowPrev()) {\n        this.index--;\n\n        if (this.index < 0) {\n          this.index = this.images.length - 1;\n        }\n\n        this.show();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.canShowNext = function () {\n      if (this.loading) {\n        return false;\n      } else if (this.images) {\n        return this.infinityMove || this.index < this.images.length - 1 ? true : false;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.canShowPrev = function () {\n      if (this.loading) {\n        return false;\n      } else if (this.images) {\n        return this.infinityMove || this.index > 0 ? true : false;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.manageFullscreen = function () {\n      if (this.fullscreen || this.forceFullscreen) {\n        var\n        /** @type {?} */\n        doc = document;\n\n        if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {\n          this.openFullscreen();\n        } else {\n          this.closeFullscreen();\n        }\n      }\n    };\n    /**\r\n     * @param {?} image\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.getSafeUrl = function (image) {\n      return image.substr(0, 10) === 'data:image' ? image : this.sanitization.bypassSecurityTrustUrl(image);\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.zoomIn = function () {\n      if (this.canZoomIn()) {\n        this.zoomValue += this.zoomStep;\n\n        if (this.zoomValue > this.zoomMax) {\n          this.zoomValue = this.zoomMax;\n        }\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.zoomOut = function () {\n      if (this.canZoomOut()) {\n        this.zoomValue -= this.zoomStep;\n\n        if (this.zoomValue < this.zoomMin) {\n          this.zoomValue = this.zoomMin;\n        }\n\n        if (this.zoomValue <= 1) {\n          this.resetPosition();\n        }\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.rotateLeft = function () {\n      this.rotateValue -= 90;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.rotateRight = function () {\n      this.rotateValue += 90;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.getTransform = function () {\n      return this.sanitization.bypassSecurityTrustStyle('scale(' + this.zoomValue + ') rotate(' + this.rotateValue + 'deg)');\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.canZoomIn = function () {\n      return this.zoomValue < this.zoomMax ? true : false;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.canZoomOut = function () {\n      return this.zoomValue > this.zoomMin ? true : false;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.canDragOnZoom = function () {\n      return this.zoom && this.zoomValue > 1;\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.mouseDownHandler = function (e) {\n      if (this.canDragOnZoom()) {\n        this.initialX = this.getClientX(e);\n        this.initialY = this.getClientY(e);\n        this.initialLeft = this.positionLeft;\n        this.initialTop = this.positionTop;\n        this.isMove = true;\n        e.preventDefault();\n      }\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.mouseUpHandler = function (e) {\n      this.isMove = false;\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.mouseMoveHandler = function (e) {\n      if (this.isMove) {\n        this.positionLeft = this.initialLeft + (this.getClientX(e) - this.initialX);\n        this.positionTop = this.initialTop + (this.getClientY(e) - this.initialY);\n      }\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.getClientX = function (e) {\n      return e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.getClientY = function (e) {\n      return e.touches && e.touches.length ? e.touches[0].clientY : e.clientY;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.resetPosition = function () {\n      if (this.zoom) {\n        this.positionLeft = 0;\n        this.positionTop = 0;\n      }\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.isKeyboardNext = function (e) {\n      return e.keyCode === 39 ? true : false;\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.isKeyboardPrev = function (e) {\n      return e.keyCode === 37 ? true : false;\n    };\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.isKeyboardEsc = function (e) {\n      return e.keyCode === 27 ? true : false;\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.openFullscreen = function () {\n      var\n      /** @type {?} */\n      element = document.documentElement;\n\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.closeFullscreen = function () {\n      if (this.isFullscreen()) {\n        var\n        /** @type {?} */\n        doc = document;\n\n        if (doc.exitFullscreen) {\n          doc.exitFullscreen();\n        } else if (doc.msExitFullscreen) {\n          doc.msExitFullscreen();\n        } else if (doc.mozCancelFullScreen) {\n          doc.mozCancelFullScreen();\n        } else if (doc.webkitExitFullscreen) {\n          doc.webkitExitFullscreen();\n        }\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.isFullscreen = function () {\n      var\n      /** @type {?} */\n      doc = document;\n      return doc.fullscreenElement || doc.webkitFullscreenElement || doc.mozFullScreenElement || doc.msFullscreenElement;\n    };\n    /**\r\n     * @param {?=} first\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.show = function (first) {\n      var _this = this;\n\n      if (first === void 0) {\n        first = false;\n      }\n\n      this.loading = true;\n      this.stopAutoPlay();\n      this.onActiveChange.emit(this.index);\n\n      if (first || !this.animation) {\n        this._show();\n      } else {\n        setTimeout(function () {\n          return _this._show();\n        }, 600);\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype._show = function () {\n      var _this = this;\n\n      this.zoomValue = 1;\n      this.rotateValue = 0;\n      this.resetPosition();\n      this.src = this.getSafeUrl(\n      /** @type {?} */\n      this.images[this.index]);\n      this.srcIndex = this.index;\n      this.description = this.descriptions[this.index];\n      this.changeDetectorRef.markForCheck();\n      setTimeout(function () {\n        if (_this.isLoaded(_this.previewImage.nativeElement)) {\n          _this.loading = false;\n\n          _this.startAutoPlay();\n\n          _this.changeDetectorRef.markForCheck();\n        } else {\n          setTimeout(function () {\n            if (_this.loading) {\n              _this.showSpinner = true;\n\n              _this.changeDetectorRef.markForCheck();\n            }\n          });\n\n          _this.previewImage.nativeElement.onload = function () {\n            _this.loading = false;\n            _this.showSpinner = false;\n            _this.previewImage.nativeElement.onload = null;\n\n            _this.startAutoPlay();\n\n            _this.changeDetectorRef.markForCheck();\n          };\n        }\n      });\n    };\n    /**\r\n     * @param {?} img\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryPreviewComponent.prototype.isLoaded = function (img) {\n      if (!img.complete) {\n        return false;\n      }\n\n      if (typeof img.naturalWidth !== 'undefined' && img.naturalWidth === 0) {\n        return false;\n      }\n\n      return true;\n    };\n\n    NgxGalleryPreviewComponent.decorators = [{\n      type: core.Component,\n      args: [{\n        selector: 'ngx-gallery-preview',\n        template: \"\\n        <ngx-gallery-arrows *ngIf=\\\"arrows\\\" (onPrevClick)=\\\"showPrev()\\\" (onNextClick)=\\\"showNext()\\\" [prevDisabled]=\\\"!canShowPrev()\\\" [nextDisabled]=\\\"!canShowNext()\\\" [arrowPrevIcon]=\\\"arrowPrevIcon\\\" [arrowNextIcon]=\\\"arrowNextIcon\\\"></ngx-gallery-arrows>\\n        <div class=\\\"ngx-gallery-preview-top\\\">\\n            <div class=\\\"ngx-gallery-preview-icons\\\">\\n                <ngx-gallery-action *ngFor=\\\"let action of actions\\\" [icon]=\\\"action.icon\\\" [disabled]=\\\"action.disabled\\\" [titleText]=\\\"action.titleText\\\" (onClick)=\\\"action.onClick($event, index)\\\"></ngx-gallery-action>\\n                <a *ngIf=\\\"download && src\\\" [href]=\\\"src\\\" class=\\\"ngx-gallery-icon\\\" aria-hidden=\\\"true\\\" download>\\n                    <i class=\\\"ngx-gallery-icon-content {{ downloadIcon }}\\\"></i>\\n                </a>\\n                <ngx-gallery-action *ngIf=\\\"zoom\\\" [icon]=\\\"zoomOutIcon\\\" [disabled]=\\\"!canZoomOut()\\\" (onClick)=\\\"zoomOut()\\\"></ngx-gallery-action>\\n                <ngx-gallery-action *ngIf=\\\"zoom\\\" [icon]=\\\"zoomInIcon\\\" [disabled]=\\\"!canZoomIn()\\\" (onClick)=\\\"zoomIn()\\\"></ngx-gallery-action>\\n                <ngx-gallery-action *ngIf=\\\"rotate\\\" [icon]=\\\"rotateLeftIcon\\\" (onClick)=\\\"rotateLeft()\\\"></ngx-gallery-action>\\n                <ngx-gallery-action *ngIf=\\\"rotate\\\" [icon]=\\\"rotateRightIcon\\\" (onClick)=\\\"rotateRight()\\\"></ngx-gallery-action>\\n                <ngx-gallery-action *ngIf=\\\"fullscreen\\\" [icon]=\\\"'ngx-gallery-fullscreen ' + fullscreenIcon\\\" (onClick)=\\\"manageFullscreen()\\\"></ngx-gallery-action>\\n                <ngx-gallery-action [icon]=\\\"'ngx-gallery-close ' + closeIcon\\\" (onClick)=\\\"close()\\\"></ngx-gallery-action>\\n            </div>\\n        </div>\\n        <div class=\\\"ngx-spinner-wrapper ngx-gallery-center\\\" [class.ngx-gallery-active]=\\\"showSpinner\\\">\\n            <i class=\\\"ngx-gallery-icon ngx-gallery-spinner {{spinnerIcon}}\\\" aria-hidden=\\\"true\\\"></i>\\n        </div>\\n        <div class=\\\"ngx-gallery-preview-wrapper\\\" (click)=\\\"closeOnClick && close()\\\" (mouseup)=\\\"mouseUpHandler($event)\\\" (mousemove)=\\\"mouseMoveHandler($event)\\\" (touchend)=\\\"mouseUpHandler($event)\\\" (touchmove)=\\\"mouseMoveHandler($event)\\\">\\n            <div class=\\\"ngx-gallery-preview-img-wrapper\\\">\\n                <img *ngIf=\\\"src\\\" #previewImage class=\\\"ngx-gallery-preview-img ngx-gallery-center\\\" [src]=\\\"src\\\" (click)=\\\"$event.stopPropagation()\\\" (mouseenter)=\\\"imageMouseEnter()\\\" (mouseleave)=\\\"imageMouseLeave()\\\" (mousedown)=\\\"mouseDownHandler($event)\\\" (touchstart)=\\\"mouseDownHandler($event)\\\" [class.ngx-gallery-active]=\\\"!loading\\\" [class.animation]=\\\"animation\\\" [class.ngx-gallery-grab]=\\\"canDragOnZoom()\\\" [style.transform]=\\\"getTransform()\\\" [style.left]=\\\"positionLeft + 'px'\\\" [style.top]=\\\"positionTop + 'px'\\\"/>\\n                <ngx-gallery-bullets *ngIf=\\\"bullets\\\" [count]=\\\"images.length\\\" [active]=\\\"index\\\" (onChange)=\\\"showAtIndex($event)\\\"></ngx-gallery-bullets>\\n            </div>\\n            <div class=\\\"ngx-gallery-preview-text\\\" *ngIf=\\\"showDescription && description\\\" [innerHTML]=\\\"description\\\" (click)=\\\"$event.stopPropagation()\\\"></div>\\n        </div>\\n    \",\n        styles: [\":host(.ngx-gallery-active) { width: 100%; height: 100%; position: fixed; left: 0; top: 0; background: rgba(0, 0, 0, 0.7); z-index: 10000; display: inline-block; } :host { display: none; } :host /deep/ .ngx-gallery-arrow { font-size: 50px; } :host /deep/ ngx-gallery-bullets { height: 5%; align-items: center; padding: 0px; } .ngx-gallery-preview-img { opacity: 0; max-width: 90%; max-height: 90%; user-select: none; transition: transform .5s; } .ngx-gallery-preview-img.animation { transition: opacity 0.5s linear, transform .5s; } .ngx-gallery-preview-img.ngx-gallery-active { opacity: 1; } .ngx-gallery-preview-img.ngx-gallery-grab { cursor: grab; cursor: -webkit-grab; } .ngx-gallery-icon.ngx-gallery-spinner { font-size: 50px; left: 0; display: inline-block; } :host /deep/ .ngx-gallery-preview-top { position: absolute; width: 100%; user-select: none; } :host /deep/ .ngx-gallery-preview-icons { float: right; } :host /deep/ .ngx-gallery-preview-icons .ngx-gallery-icon { position: relative; margin-right: 10px; margin-top: 10px; font-size: 25px; cursor: pointer; text-decoration: none; } :host /deep/ .ngx-gallery-preview-icons .ngx-gallery-icon.ngx-gallery-icon-disabled { cursor: default; opacity: 0.4; } .ngx-spinner-wrapper { width: 50px; height: 50px; display: none; } .ngx-spinner-wrapper.ngx-gallery-active { display: inline-block; } .ngx-gallery-center { position: absolute; left: 0; right: 0; bottom: 0; margin: auto; top: 0; } .ngx-gallery-preview-text { width: 100%; background: rgba(0, 0, 0, 0.7); padding: 10px; text-align: center; color: white; font-size: 16px; flex: 0 1 auto; z-index: 10; } .ngx-gallery-preview-wrapper { width: 100%; height: 100%; display: flex; flex-flow: column; } .ngx-gallery-preview-img-wrapper { flex: 1 1 auto; position: relative; } \"]\n      }]\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryPreviewComponent.ctorParameters = function () {\n      return [{\n        type: platformBrowser.DomSanitizer\n      }, {\n        type: core.ElementRef\n      }, {\n        type: NgxGalleryHelperService\n      }, {\n        type: core.Renderer\n      }, {\n        type: core.ChangeDetectorRef\n      }];\n    };\n\n    NgxGalleryPreviewComponent.propDecorators = {\n      'images': [{\n        type: core.Input\n      }],\n      'descriptions': [{\n        type: core.Input\n      }],\n      'showDescription': [{\n        type: core.Input\n      }],\n      'arrows': [{\n        type: core.Input\n      }],\n      'arrowsAutoHide': [{\n        type: core.Input\n      }],\n      'swipe': [{\n        type: core.Input\n      }],\n      'fullscreen': [{\n        type: core.Input\n      }],\n      'forceFullscreen': [{\n        type: core.Input\n      }],\n      'closeOnClick': [{\n        type: core.Input\n      }],\n      'closeOnEsc': [{\n        type: core.Input\n      }],\n      'keyboardNavigation': [{\n        type: core.Input\n      }],\n      'arrowPrevIcon': [{\n        type: core.Input\n      }],\n      'arrowNextIcon': [{\n        type: core.Input\n      }],\n      'closeIcon': [{\n        type: core.Input\n      }],\n      'fullscreenIcon': [{\n        type: core.Input\n      }],\n      'spinnerIcon': [{\n        type: core.Input\n      }],\n      'autoPlay': [{\n        type: core.Input\n      }],\n      'autoPlayInterval': [{\n        type: core.Input\n      }],\n      'autoPlayPauseOnHover': [{\n        type: core.Input\n      }],\n      'infinityMove': [{\n        type: core.Input\n      }],\n      'zoom': [{\n        type: core.Input\n      }],\n      'zoomStep': [{\n        type: core.Input\n      }],\n      'zoomMax': [{\n        type: core.Input\n      }],\n      'zoomMin': [{\n        type: core.Input\n      }],\n      'zoomInIcon': [{\n        type: core.Input\n      }],\n      'zoomOutIcon': [{\n        type: core.Input\n      }],\n      'animation': [{\n        type: core.Input\n      }],\n      'actions': [{\n        type: core.Input\n      }],\n      'rotate': [{\n        type: core.Input\n      }],\n      'rotateLeftIcon': [{\n        type: core.Input\n      }],\n      'rotateRightIcon': [{\n        type: core.Input\n      }],\n      'download': [{\n        type: core.Input\n      }],\n      'downloadIcon': [{\n        type: core.Input\n      }],\n      'bullets': [{\n        type: core.Input\n      }],\n      'onOpen': [{\n        type: core.Output\n      }],\n      'onClose': [{\n        type: core.Output\n      }],\n      'onActiveChange': [{\n        type: core.Output\n      }],\n      'previewImage': [{\n        type: core.ViewChild,\n        args: ['previewImage']\n      }],\n      'onMouseEnter': [{\n        type: core.HostListener,\n        args: ['mouseenter']\n      }],\n      'onMouseLeave': [{\n        type: core.HostListener,\n        args: ['mouseleave']\n      }]\n    };\n    return NgxGalleryPreviewComponent;\n  }();\n\n  var NgxGalleryImageSize =\n  /** @class */\n  function () {\n    function NgxGalleryImageSize() {}\n\n    NgxGalleryImageSize.Cover = 'cover';\n    NgxGalleryImageSize.Contain = 'contain';\n    return NgxGalleryImageSize;\n  }();\n\n  var NgxGalleryLayout =\n  /** @class */\n  function () {\n    function NgxGalleryLayout() {}\n\n    NgxGalleryLayout.ThumbnailsTop = 'thumbnails-top';\n    NgxGalleryLayout.ThumbnailsBottom = 'thumbnails-bottom';\n    return NgxGalleryLayout;\n  }();\n\n  var NgxGalleryAction =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} action\r\n     */\n    function NgxGalleryAction(action) {\n      this.icon = action.icon;\n      this.disabled = action.disabled ? action.disabled : false;\n      this.titleText = action.titleText ? action.titleText : '';\n      this.onClick = action.onClick;\n    }\n\n    return NgxGalleryAction;\n  }();\n\n  var NgxGalleryOptions =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} obj\r\n     */\n    function NgxGalleryOptions(obj) {\n      var preventDefaults = obj.breakpoint === undefined ? false : true;\n\n      function use(source, defaultValue) {\n        return obj && (source !== undefined || preventDefaults) ? source : defaultValue;\n      }\n\n      this.breakpoint = use(obj.breakpoint, undefined);\n      this.width = use(obj.width, '500px');\n      this.height = use(obj.height, '400px');\n      this.fullWidth = use(obj.fullWidth, false);\n      this.layout = use(obj.layout, NgxGalleryLayout.ThumbnailsBottom);\n      this.startIndex = use(obj.startIndex, 0);\n      this.linkTarget = use(obj.linkTarget, '_blank');\n      this.lazyLoading = use(obj.lazyLoading, true);\n      this.image = use(obj.image, true);\n      this.imagePercent = use(obj.imagePercent, 75);\n      this.imageArrows = use(obj.imageArrows, true);\n      this.imageArrowsAutoHide = use(obj.imageArrowsAutoHide, false);\n      this.imageSwipe = use(obj.imageSwipe, false);\n      this.imageAnimation = use(obj.imageAnimation, NgxGalleryAnimation.Fade);\n      this.imageSize = use(obj.imageSize, NgxGalleryImageSize.Cover);\n      this.imageAutoPlay = use(obj.imageAutoPlay, false);\n      this.imageAutoPlayInterval = use(obj.imageAutoPlayInterval, 2000);\n      this.imageAutoPlayPauseOnHover = use(obj.imageAutoPlayPauseOnHover, false);\n      this.imageInfinityMove = use(obj.imageInfinityMove, false);\n\n      if (obj && obj.imageActions && obj.imageActions.length) {\n        obj.imageActions = obj.imageActions.map(function (action) {\n          return new NgxGalleryAction(action);\n        });\n      }\n\n      this.imageActions = use(obj.imageActions, []);\n      this.imageDescription = use(obj.imageDescription, false);\n      this.imageBullets = use(obj.imageBullets, false);\n      this.thumbnails = use(obj.thumbnails, true);\n      this.thumbnailsColumns = use(obj.thumbnailsColumns, 4);\n      this.thumbnailsRows = use(obj.thumbnailsRows, 1);\n      this.thumbnailsPercent = use(obj.thumbnailsPercent, 25);\n      this.thumbnailsMargin = use(obj.thumbnailsMargin, 10);\n      this.thumbnailsArrows = use(obj.thumbnailsArrows, true);\n      this.thumbnailsArrowsAutoHide = use(obj.thumbnailsArrowsAutoHide, false);\n      this.thumbnailsSwipe = use(obj.thumbnailsSwipe, false);\n      this.thumbnailsMoveSize = use(obj.thumbnailsMoveSize, 1);\n      this.thumbnailsOrder = use(obj.thumbnailsOrder, NgxGalleryOrder.Column);\n      this.thumbnailsRemainingCount = use(obj.thumbnailsRemainingCount, false);\n      this.thumbnailsAsLinks = use(obj.thumbnailsAsLinks, false);\n      this.thumbnailsAutoHide = use(obj.thumbnailsAutoHide, false);\n      this.thumbnailMargin = use(obj.thumbnailMargin, 10);\n      this.thumbnailSize = use(obj.thumbnailSize, NgxGalleryImageSize.Cover);\n\n      if (obj && obj.thumbnailActions && obj.thumbnailActions.length) {\n        obj.thumbnailActions = obj.thumbnailActions.map(function (action) {\n          return new NgxGalleryAction(action);\n        });\n      }\n\n      this.thumbnailActions = use(obj.thumbnailActions, []);\n      this.preview = use(obj.preview, true);\n      this.previewDescription = use(obj.previewDescription, true);\n      this.previewArrows = use(obj.previewArrows, true);\n      this.previewArrowsAutoHide = use(obj.previewArrowsAutoHide, false);\n      this.previewSwipe = use(obj.previewSwipe, false);\n      this.previewFullscreen = use(obj.previewFullscreen, false);\n      this.previewForceFullscreen = use(obj.previewForceFullscreen, false);\n      this.previewCloseOnClick = use(obj.previewCloseOnClick, false);\n      this.previewCloseOnEsc = use(obj.previewCloseOnEsc, false);\n      this.previewKeyboardNavigation = use(obj.previewKeyboardNavigation, false);\n      this.previewAnimation = use(obj.previewAnimation, true);\n      this.previewAutoPlay = use(obj.previewAutoPlay, false);\n      this.previewAutoPlayInterval = use(obj.previewAutoPlayInterval, 2000);\n      this.previewAutoPlayPauseOnHover = use(obj.previewAutoPlayPauseOnHover, false);\n      this.previewInfinityMove = use(obj.previewInfinityMove, false);\n      this.previewZoom = use(obj.previewZoom, false);\n      this.previewZoomStep = use(obj.previewZoomStep, 0.1);\n      this.previewZoomMax = use(obj.previewZoomMax, 2);\n      this.previewZoomMin = use(obj.previewZoomMin, 0.5);\n      this.previewRotate = use(obj.previewRotate, false);\n      this.previewDownload = use(obj.previewDownload, false);\n      this.previewCustom = use(obj.previewCustom, undefined);\n      this.previewBullets = use(obj.previewBullets, false);\n      this.arrowPrevIcon = use(obj.arrowPrevIcon, 'fa fa-arrow-circle-left');\n      this.arrowNextIcon = use(obj.arrowNextIcon, 'fa fa-arrow-circle-right');\n      this.closeIcon = use(obj.closeIcon, 'fa fa-times-circle');\n      this.fullscreenIcon = use(obj.fullscreenIcon, 'fa fa-arrows-alt');\n      this.spinnerIcon = use(obj.spinnerIcon, 'fa fa-spinner fa-pulse fa-3x fa-fw');\n      this.zoomInIcon = use(obj.zoomInIcon, 'fa fa-search-plus');\n      this.zoomOutIcon = use(obj.zoomOutIcon, 'fa fa-search-minus');\n      this.rotateLeftIcon = use(obj.rotateLeftIcon, 'fa fa-undo');\n      this.rotateRightIcon = use(obj.rotateRightIcon, 'fa fa-repeat');\n      this.downloadIcon = use(obj.downloadIcon, 'fa fa-arrow-circle-down');\n\n      if (obj && obj.actions && obj.actions.length) {\n        obj.actions = obj.actions.map(function (action) {\n          return new NgxGalleryAction(action);\n        });\n      }\n\n      this.actions = use(obj.actions, []);\n    }\n\n    return NgxGalleryOptions;\n  }();\n\n  var NgxGalleryOrderedImage =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} obj\r\n     */\n    function NgxGalleryOrderedImage(obj) {\n      this.src = obj.src;\n      this.index = obj.index;\n    }\n\n    return NgxGalleryOrderedImage;\n  }();\n\n  var NgxGalleryComponent =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} myElement\r\n     */\n    function NgxGalleryComponent(myElement) {\n      this.myElement = myElement;\n      this.imagesReady = new core.EventEmitter();\n      this.change = new core.EventEmitter();\n      this.previewOpen = new core.EventEmitter();\n      this.previewClose = new core.EventEmitter();\n      this.previewChange = new core.EventEmitter();\n      this.oldImagesLength = 0;\n      this.selectedIndex = 0;\n      this.breakpoint = undefined;\n      this.prevBreakpoint = undefined;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.ngOnInit = function () {\n      this.options = this.options.map(function (opt) {\n        return new NgxGalleryOptions(opt);\n      });\n      this.sortOptions();\n      this.setBreakpoint();\n      this.setOptions();\n      this.checkFullWidth();\n\n      if (this.currentOptions) {\n        this.selectedIndex =\n        /** @type {?} */\n        this.currentOptions.startIndex;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.ngDoCheck = function () {\n      if (this.images !== undefined && this.images.length !== this.oldImagesLength || this.images !== this.oldImages) {\n        this.oldImagesLength = this.images.length;\n        this.oldImages = this.images;\n        this.setOptions();\n        this.setImages();\n\n        if (this.images && this.images.length) {\n          this.imagesReady.emit();\n        }\n\n        if (this.image) {\n          this.image.reset(\n          /** @type {?} */\n          this.currentOptions.startIndex);\n        }\n\n        if (this.currentOptions.thumbnailsAutoHide && this.currentOptions.thumbnails && this.images.length <= 1) {\n          this.currentOptions.thumbnails = false;\n          this.currentOptions.imageArrows = false;\n        }\n\n        this.resetThumbnails();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.ngAfterViewInit = function () {\n      this.checkFullWidth();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.onResize = function () {\n      var _this = this;\n\n      this.setBreakpoint();\n\n      if (this.prevBreakpoint !== this.breakpoint) {\n        this.setOptions();\n        this.resetThumbnails();\n      }\n\n      if (this.currentOptions && this.currentOptions.fullWidth) {\n        if (this.fullWidthTimeout) {\n          clearTimeout(this.fullWidthTimeout);\n        }\n\n        this.fullWidthTimeout = setTimeout(function () {\n          _this.checkFullWidth();\n        }, 200);\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.getImageHeight = function () {\n      return this.currentOptions && this.currentOptions.thumbnails ? this.currentOptions.imagePercent + '%' : '100%';\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.getThumbnailsHeight = function () {\n      if (this.currentOptions && this.currentOptions.image) {\n        return 'calc(' + this.currentOptions.thumbnailsPercent + '% - ' + this.currentOptions.thumbnailsMargin + 'px)';\n      } else {\n        return '100%';\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.getThumbnailsMarginTop = function () {\n      if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsBottom) {\n        return this.currentOptions.thumbnailsMargin + 'px';\n      } else {\n        return '0px';\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.getThumbnailsMarginBottom = function () {\n      if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsTop) {\n        return this.currentOptions.thumbnailsMargin + 'px';\n      } else {\n        return '0px';\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.openPreview = function (index) {\n      if (this.currentOptions.previewCustom) {\n        this.currentOptions.previewCustom(index);\n      } else {\n        this.previewEnabled = true;\n        this.preview.open(index);\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.onPreviewOpen = function () {\n      this.previewOpen.emit();\n\n      if (this.image && this.image.autoPlay) {\n        this.image.stopAutoPlay();\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.onPreviewClose = function () {\n      this.previewEnabled = false;\n      this.previewClose.emit();\n\n      if (this.image && this.image.autoPlay) {\n        this.image.startAutoPlay();\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.selectFromImage = function (index) {\n      this.select(index);\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.selectFromThumbnails = function (index) {\n      this.select(index);\n\n      if (this.currentOptions && this.currentOptions.thumbnails && this.currentOptions.preview && (!this.currentOptions.image || this.currentOptions.thumbnailsRemainingCount)) {\n        this.openPreview(this.selectedIndex);\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.show = function (index) {\n      this.select(index);\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.showNext = function () {\n      this.image.showNext();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.showPrev = function () {\n      this.image.showPrev();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.canShowNext = function () {\n      if (this.images && this.currentOptions) {\n        return this.currentOptions.imageInfinityMove || this.selectedIndex < this.images.length - 1 ? true : false;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.canShowPrev = function () {\n      if (this.images && this.currentOptions) {\n        return this.currentOptions.imageInfinityMove || this.selectedIndex > 0 ? true : false;\n      } else {\n        return false;\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.previewSelect = function (index) {\n      this.previewChange.emit({\n        index: index,\n        image: this.images[index]\n      });\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.moveThumbnailsRight = function () {\n      this.thubmnails.moveRight();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.moveThumbnailsLeft = function () {\n      this.thubmnails.moveLeft();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.canMoveThumbnailsRight = function () {\n      return this.thubmnails.canMoveRight();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.canMoveThumbnailsLeft = function () {\n      return this.thubmnails.canMoveLeft();\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.resetThumbnails = function () {\n      if (this.thubmnails) {\n        this.thubmnails.reset(\n        /** @type {?} */\n        this.currentOptions.startIndex);\n      }\n    };\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.select = function (index) {\n      this.selectedIndex = index;\n      this.change.emit({\n        index: index,\n        image: this.images[index]\n      });\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.checkFullWidth = function () {\n      if (this.currentOptions && this.currentOptions.fullWidth) {\n        this.width = document.body.clientWidth + 'px';\n        this.left = -(document.body.clientWidth - this.myElement.nativeElement.parentNode.innerWidth) / 2 + 'px';\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.setImages = function () {\n      this.smallImages = this.images.map(function (img) {\n        /** @type {?} */\n        return img.small;\n      });\n      this.mediumImages = this.images.map(function (img, i) {\n        return new NgxGalleryOrderedImage({\n          src: img.medium,\n          index: i\n        });\n      });\n      this.bigImages = this.images.map(function (img) {\n        /** @type {?} */\n        return img.big;\n      });\n      this.descriptions = this.images.map(function (img) {\n        /** @type {?} */\n        return img.description;\n      });\n      this.links = this.images.map(function (img) {\n        /** @type {?} */\n        return img.url;\n      });\n      this.labels = this.images.map(function (img) {\n        /** @type {?} */\n        return img.label;\n      });\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.setBreakpoint = function () {\n      this.prevBreakpoint = this.breakpoint;\n      var\n      /** @type {?} */\n      breakpoints;\n\n      if (typeof window !== 'undefined') {\n        breakpoints = this.options.filter(function (opt) {\n          return opt.breakpoint >= window.innerWidth;\n        }).map(function (opt) {\n          return opt.breakpoint;\n        });\n      }\n\n      if (breakpoints && breakpoints.length) {\n        this.breakpoint = breakpoints.pop();\n      } else {\n        this.breakpoint = undefined;\n      }\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.sortOptions = function () {\n      this.options = this.options.filter(function (a) {\n        return a.breakpoint === undefined;\n      }).concat(this.options.filter(function (a) {\n        return a.breakpoint !== undefined;\n      }).sort(function (a, b) {\n        return b.breakpoint - a.breakpoint;\n      }));\n    };\n    /**\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.setOptions = function () {\n      var _this = this;\n\n      this.currentOptions = new NgxGalleryOptions({});\n      this.options.filter(function (opt) {\n        return opt.breakpoint === undefined || opt.breakpoint >= _this.breakpoint;\n      }).map(function (opt) {\n        return _this.combineOptions(_this.currentOptions, opt);\n      });\n      this.width =\n      /** @type {?} */\n      this.currentOptions.width;\n      this.height =\n      /** @type {?} */\n      this.currentOptions.height;\n    };\n    /**\r\n     * @param {?} first\r\n     * @param {?} second\r\n     * @return {?}\r\n     */\n\n\n    NgxGalleryComponent.prototype.combineOptions = function (first, second) {\n      Object.keys(second).map(function (val) {\n        return first[val] = second[val] !== undefined ? second[val] : first[val];\n      });\n    };\n\n    NgxGalleryComponent.decorators = [{\n      type: core.Component,\n      args: [{\n        selector: 'ngx-gallery',\n        template: \"\\n    <div class=\\\"ngx-gallery-layout {{currentOptions?.layout}}\\\">\\n        <ngx-gallery-image *ngIf=\\\"currentOptions?.image\\\" [style.height]=\\\"getImageHeight()\\\" [images]=\\\"mediumImages\\\" [clickable]=\\\"currentOptions?.preview\\\" [selectedIndex]=\\\"selectedIndex\\\" [arrows]=\\\"currentOptions?.imageArrows\\\" [arrowsAutoHide]=\\\"currentOptions?.imageArrowsAutoHide\\\" [arrowPrevIcon]=\\\"currentOptions?.arrowPrevIcon\\\" [arrowNextIcon]=\\\"currentOptions?.arrowNextIcon\\\" [swipe]=\\\"currentOptions?.imageSwipe\\\" [animation]=\\\"currentOptions?.imageAnimation\\\" [size]=\\\"currentOptions?.imageSize\\\" [autoPlay]=\\\"currentOptions?.imageAutoPlay\\\" [autoPlayInterval]=\\\"currentOptions?.imageAutoPlayInterval\\\" [autoPlayPauseOnHover]=\\\"currentOptions?.imageAutoPlayPauseOnHover\\\" [infinityMove]=\\\"currentOptions?.imageInfinityMove\\\"  [lazyLoading]=\\\"currentOptions?.lazyLoading\\\" [actions]=\\\"currentOptions?.imageActions\\\" [descriptions]=\\\"descriptions\\\" [showDescription]=\\\"currentOptions?.imageDescription\\\" [bullets]=\\\"currentOptions?.imageBullets\\\" (onClick)=\\\"openPreview($event)\\\" (onActiveChange)=\\\"selectFromImage($event)\\\"></ngx-gallery-image>\\n\\n        <ngx-gallery-thumbnails *ngIf=\\\"currentOptions?.thumbnails\\\" [style.marginTop]=\\\"getThumbnailsMarginTop()\\\" [style.marginBottom]=\\\"getThumbnailsMarginBottom()\\\" [style.height]=\\\"getThumbnailsHeight()\\\" [images]=\\\"smallImages\\\" [links]=\\\"currentOptions?.thumbnailsAsLinks ? links : []\\\" [labels]=\\\"labels\\\" [linkTarget]=\\\"currentOptions?.linkTarget\\\" [selectedIndex]=\\\"selectedIndex\\\" [columns]=\\\"currentOptions?.thumbnailsColumns\\\" [rows]=\\\"currentOptions?.thumbnailsRows\\\" [margin]=\\\"currentOptions?.thumbnailMargin\\\" [arrows]=\\\"currentOptions?.thumbnailsArrows\\\" [arrowsAutoHide]=\\\"currentOptions?.thumbnailsArrowsAutoHide\\\" [arrowPrevIcon]=\\\"currentOptions?.arrowPrevIcon\\\" [arrowNextIcon]=\\\"currentOptions?.arrowNextIcon\\\" [clickable]=\\\"currentOptions?.image || currentOptions?.preview\\\" [swipe]=\\\"currentOptions?.thumbnailsSwipe\\\" [size]=\\\"currentOptions?.thumbnailSize\\\" [moveSize]=\\\"currentOptions?.thumbnailsMoveSize\\\" [order]=\\\"currentOptions?.thumbnailsOrder\\\" [remainingCount]=\\\"currentOptions?.thumbnailsRemainingCount\\\" [lazyLoading]=\\\"currentOptions?.lazyLoading\\\" [actions]=\\\"currentOptions?.thumbnailActions\\\"  (onActiveChange)=\\\"selectFromThumbnails($event)\\\"></ngx-gallery-thumbnails>\\n\\n        <ngx-gallery-preview [images]=\\\"bigImages\\\" [descriptions]=\\\"descriptions\\\" [showDescription]=\\\"currentOptions?.previewDescription\\\" [arrowPrevIcon]=\\\"currentOptions?.arrowPrevIcon\\\" [arrowNextIcon]=\\\"currentOptions?.arrowNextIcon\\\" [closeIcon]=\\\"currentOptions?.closeIcon\\\" [fullscreenIcon]=\\\"currentOptions?.fullscreenIcon\\\" [spinnerIcon]=\\\"currentOptions?.spinnerIcon\\\" [arrows]=\\\"currentOptions?.previewArrows\\\" [arrowsAutoHide]=\\\"currentOptions?.previewArrowsAutoHide\\\" [swipe]=\\\"currentOptions?.previewSwipe\\\" [fullscreen]=\\\"currentOptions?.previewFullscreen\\\" [forceFullscreen]=\\\"currentOptions?.previewForceFullscreen\\\" [closeOnClick]=\\\"currentOptions?.previewCloseOnClick\\\" [closeOnEsc]=\\\"currentOptions?.previewCloseOnEsc\\\" [keyboardNavigation]=\\\"currentOptions?.previewKeyboardNavigation\\\" [animation]=\\\"currentOptions?.previewAnimation\\\" [autoPlay]=\\\"currentOptions?.previewAutoPlay\\\" [autoPlayInterval]=\\\"currentOptions?.previewAutoPlayInterval\\\" [autoPlayPauseOnHover]=\\\"currentOptions?.previewAutoPlayPauseOnHover\\\" [infinityMove]=\\\"currentOptions?.previewInfinityMove\\\" [zoom]=\\\"currentOptions?.previewZoom\\\" [zoomStep]=\\\"currentOptions?.previewZoomStep\\\" [zoomMax]=\\\"currentOptions?.previewZoomMax\\\" [zoomMin]=\\\"currentOptions?.previewZoomMin\\\" [zoomInIcon]=\\\"currentOptions?.zoomInIcon\\\" [zoomOutIcon]=\\\"currentOptions?.zoomOutIcon\\\" [actions]=\\\"currentOptions?.actions\\\" [rotate]=\\\"currentOptions?.previewRotate\\\" [rotateLeftIcon]=\\\"currentOptions?.rotateLeftIcon\\\" [rotateRightIcon]=\\\"currentOptions?.rotateRightIcon\\\" [download]=\\\"currentOptions?.previewDownload\\\" [downloadIcon]=\\\"currentOptions?.downloadIcon\\\" [bullets]=\\\"currentOptions?.previewBullets\\\" (onClose)=\\\"onPreviewClose()\\\" (onOpen)=\\\"onPreviewOpen()\\\" (onActiveChange)=\\\"previewSelect($event)\\\" [class.ngx-gallery-active]=\\\"previewEnabled\\\"></ngx-gallery-preview>\\n    </div>\\n    \",\n        styles: [\":host { display: inline-block; } :host > * { float: left; } :host /deep/ * { box-sizing: border-box; } :host /deep/ .ngx-gallery-icon { color: white; font-size: 25px; position: absolute; z-index: 2000; display: inline-block; } :host /deep/ .ngx-gallery-icon .ngx-gallery-icon-content { display: block; } :host /deep/ .ngx-gallery-clickable { cursor: pointer; } :host /deep/ .ngx-gallery-icons-wrapper .ngx-gallery-icon { position: relative; margin-right: 5px; margin-top: 5px; font-size: 20px; cursor: pointer; } :host /deep/ .ngx-gallery-icons-wrapper { float: right; } :host .ngx-gallery-layout { width: 100%; height: 100%; display: flex; flex-direction: column; } :host .ngx-gallery-layout.thumbnails-top ngx-gallery-image { order: 2; } :host .ngx-gallery-layout.thumbnails-top ngx-gallery-thumbnails { order: 1; } :host .ngx-gallery-layout.thumbnails-bottom ngx-gallery-image { order: 1; } :host .ngx-gallery-layout.thumbnails-bottom ngx-gallery-thumbnails { order: 2; } \"],\n        providers: [NgxGalleryHelperService]\n      }]\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryComponent.ctorParameters = function () {\n      return [{\n        type: core.ElementRef\n      }];\n    };\n\n    NgxGalleryComponent.propDecorators = {\n      'options': [{\n        type: core.Input\n      }],\n      'images': [{\n        type: core.Input\n      }],\n      'imagesReady': [{\n        type: core.Output\n      }],\n      'change': [{\n        type: core.Output\n      }],\n      'previewOpen': [{\n        type: core.Output\n      }],\n      'previewClose': [{\n        type: core.Output\n      }],\n      'previewChange': [{\n        type: core.Output\n      }],\n      'preview': [{\n        type: core.ViewChild,\n        args: [NgxGalleryPreviewComponent]\n      }],\n      'image': [{\n        type: core.ViewChild,\n        args: [NgxGalleryImageComponent]\n      }],\n      'thubmnails': [{\n        type: core.ViewChild,\n        args: [NgxGalleryThumbnailsComponent]\n      }],\n      'width': [{\n        type: core.HostBinding,\n        args: ['style.width']\n      }],\n      'height': [{\n        type: core.HostBinding,\n        args: ['style.height']\n      }],\n      'left': [{\n        type: core.HostBinding,\n        args: ['style.left']\n      }],\n      'onResize': [{\n        type: core.HostListener,\n        args: ['window:resize']\n      }]\n    };\n    return NgxGalleryComponent;\n  }();\n\n  var NgxGalleryImage =\n  /** @class */\n  function () {\n    /**\r\n     * @param {?} obj\r\n     */\n    function NgxGalleryImage(obj) {\n      this.small = obj.small;\n      this.medium = obj.medium;\n      this.big = obj.big;\n      this.description = obj.description;\n      this.url = obj.url;\n      this.label = obj.label;\n    }\n\n    return NgxGalleryImage;\n  }();\n\n  var __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return function (d, b) {\n      extendStatics(d, b);\n\n      function __() {\n        this.constructor = d;\n      }\n\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n  }();\n\n  var CustomHammerConfig =\n  /** @class */\n  function (_super) {\n    __extends(CustomHammerConfig, _super);\n\n    function CustomHammerConfig() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.overrides = {\n        'pinch': {\n          enable: false\n        },\n        'rotate': {\n          enable: false\n        }\n      };\n      return _this;\n    }\n\n    return CustomHammerConfig;\n  }(platformBrowser.HammerGestureConfig);\n\n  var NgxGalleryModule =\n  /** @class */\n  function () {\n    function NgxGalleryModule() {}\n\n    NgxGalleryModule.decorators = [{\n      type: core.NgModule,\n      args: [{\n        imports: [common.CommonModule],\n        declarations: [NgxGalleryActionComponent, NgxGalleryArrowsComponent, NgxGalleryBulletsComponent, NgxGalleryImageComponent, NgxGalleryThumbnailsComponent, NgxGalleryPreviewComponent, NgxGalleryComponent],\n        exports: [NgxGalleryComponent],\n        providers: [{\n          provide: platformBrowser.HAMMER_GESTURE_CONFIG,\n          useClass: CustomHammerConfig\n        }]\n      }]\n    }];\n    /**\r\n     * @nocollapse\r\n     */\n\n    NgxGalleryModule.ctorParameters = function () {\n      return [];\n    };\n\n    return NgxGalleryModule;\n  }();\n\n  exports.CustomHammerConfig = CustomHammerConfig;\n  exports.NgxGalleryModule = NgxGalleryModule;\n  exports.NgxGalleryComponent = NgxGalleryComponent;\n  exports.NgxGalleryActionComponent = NgxGalleryActionComponent;\n  exports.NgxGalleryImageComponent = NgxGalleryImageComponent;\n  exports.NgxGalleryThumbnailsComponent = NgxGalleryThumbnailsComponent;\n  exports.NgxGalleryPreviewComponent = NgxGalleryPreviewComponent;\n  exports.NgxGalleryArrowsComponent = NgxGalleryArrowsComponent;\n  exports.NgxGalleryBulletsComponent = NgxGalleryBulletsComponent;\n  exports.NgxGalleryOptions = NgxGalleryOptions;\n  exports.NgxGalleryImage = NgxGalleryImage;\n  exports.NgxGalleryAnimation = NgxGalleryAnimation;\n  exports.NgxGalleryHelperService = NgxGalleryHelperService;\n  exports.NgxGalleryImageSize = NgxGalleryImageSize;\n  exports.NgxGalleryLayout = NgxGalleryLayout;\n  exports.NgxGalleryOrder = NgxGalleryOrder;\n  exports.NgxGalleryOrderedImage = NgxGalleryOrderedImage;\n  exports.NgxGalleryAction = NgxGalleryAction;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}